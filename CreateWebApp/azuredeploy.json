{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
      "_generator": {
        "name": "bicep",
        "version": "0.5.6.12127",
        "templateHash": "10602523904429381366"
      }
    },
    "parameters": {
      "storageName": {
        "type": "string",
        "minLength": 3,
        "maxLength": 24,
        "defaultValue": "[concat('challenge', uniqueString(resourceGroup().id))]"
      },
      "functionAppName": {
        "type": "string",
        "minLength": 3,
        "maxLength": 24,
        "defaultValue": "[concat('challfunapp', uniqueString(resourceGroup().id))]"
      },
      "storageSKU": {
        "type": "string",
        "defaultValue": "Standard_LRS",
        "allowedValues": [
          "Standard_LRS",
          "Standard_GRS",
          "Standard_RAGRS",
          "Standard_ZRS",
          "Premium_LRS",
          "Premium_ZRS",
          "Standard_GZRS",
          "Standard_RAGZRS"
        ]
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]"
      },
      "sku": {
        "type": "string",
        "defaultValue": "B1",
        "metadata": {
          "description": "The SKU of App Service Plan."
        }
      },
      "webAppName": {
        "defaultValue": "myWebApp",
        "type": "string"
      },
      "virtualNetworkName": {
        "defaultValue": "myVirtualNetwork",
        "type": "string"
      },
      "appGatewaySubnetName": {
        "defaultValue": "myAppGatewaySubnet",
        "type": "string"
      },
      "appGatewayName": {
        "defaultValue": "myAppGateway",
        "type": "string"
      },
      "logicAppName": {
      "type": "string",
      "metadata": {
          "description": "The name of the logic app to create."
      },
      "defaultValue": "[format('logicApp-{0}', uniqueString(resourceGroup().id))]"
      },
      "testUri": {
      "defaultValue": "https://status.azure.com/en-us/status/",
      "type": "string",
      "metadata": {
          "description": "A test URI"
      }
      },
      "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Specifies the name of the key vault."
      },
      "defaultValue": "challenge1-key-vault"
      },
      "enabledForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
      }
      },
      "enabledForDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
      }
      },
      "enabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      }
      },
      "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
      }
      },
      "objectId": {
      "type": "string",
      "metadata": {
        "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
      },
      "defaultValue": "50e818bc-8565-494b-a509-9ac392264929"
      },
      "keysPermissions": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
      }
      },
      "secretsPermissions": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
      }
      },
      "skuName": {
      "type": "string",
      "defaultValue": "standard",
      "allowedValues": [
        "standard",
        "premium"
      ],
      "metadata": {
        "description": "Specifies whether the key vault is a standard vault or a premium vault."
      }
      },
      "secretName": {
      "type": "string",
      "defaultValue": "challenge-secret",
      "metadata": {
        "description": "Specifies the name of the secret that you want to create."
      }
      },
      "secretValue": {
      "type": "secureString",
      "defaultValue": "challenge-secvalue",
      "metadata": {
        "description": "Specifies the value of the secret that you want to create."
      }
      },
      "virtualNetworks_vnet_name": {
        "defaultValue": "vnet",
        "type": "String"
      },
      "publicIPAddresses_1909686752_name": {
      "defaultValue": "1909686752",
      "type": "String"
      },
      "networkSecurityGroups_challenge_rgnsg_name": {
        "defaultValue": "challenge-rgnsg",
        "type": "String"
    },
    "networkInterfaces_challenge_rgint_name": {
      "defaultValue": "challenge-rgint",
      "type": "String"
  },
  "publicIPAddresses_1909686752_externalid": {
      "defaultValue": "/subscriptions/aec799d0-d788-4e61-ac0f-017b5ec3300a/resourceGroups/challenge-rg/providers/Microsoft.Network/publicIPAddresses/1909686752",
      "type": "String"
  },
  "virtualNetworks_vnet_externalid": {
      "defaultValue": "/subscriptions/aec799d0-d788-4e61-ac0f-017b5ec3300a/resourceGroups/challenge-rg/providers/Microsoft.Network/virtualNetworks/vnet",
      "type": "String"
  },
  "networkSecurityGroups_challenge_rgnsg_externalid": {
      "defaultValue": "/subscriptions/aec799d0-d788-4e61-ac0f-017b5ec3300a/resourceGroups/challenge-rg/providers/Microsoft.Network/networkSecurityGroups/challenge-rgnsg",
      "type": "String"
  }
    },
    "variables": {
      "webAppName": "[concat(parameters('webAppName'), '-', uniqueString(resourceGroup().id))]",
      "webAppPlanName": "[concat(parameters('webAppName'), 'Plan', '-', uniqueString(resourceGroup().id))]",
      "applicationGatewayName": "[concat(parameters('appGatewayName'), '-', uniqueString(resourceGroup().id))]",
      "applicationGatewaySkuSize": "Standard_v2",
      "applicationGatewayTier": "Standard_v2",
      "applicationGatewayAutoScaleMinCapacity": 2,
      "applicationGatewayAutoScaleMaxCapacity": 5,
      "storageAccountid": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageName'))]",
      "location": "[parameters('location')]",
      "webAppPlanId": "[resourceId('Microsoft.Web/serverfarms', variables('webAppPlanName'))]",
      "webAppPlanSku": "F1",
      "frequency": "Hour",
      "interval": "1",
      "type": "recurrence",
      "actionType": "http",
      "method": "GET",
      "workflowSchema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
      "virtualNetworkName": "[concat(parameters('virtualNetworkName'), '-', uniqueString(resourceGroup().id))]",
      "virtualNetworkAddressPrefix": "10.0.0.0/20",
      "virtualNetworkSubnetName": "[parameters('appGatewaySubnetName')]",
      "virtualNetworkSubnetPrefix": "10.0.0.0/24",
      "virtualNetworkId": "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
      "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', variables('virtualNetworkName'), variables('virtualNetworkSubnetName'))]",
      "publicIpAddressName": "[concat('myAppGatewayPublicIp', '-', uniqueString(resourceGroup().id))]",
      "publicIpAddressSku": "Standard",
      "publicIpAddressAllocationType": "Static",
      "publicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses/', variables('publicIpAddressName'))]",
        "appGwIpConfigName": "appGatewayIpConfigName",
        "appGwFrontendPortName": "appGatewayFrontendPort_80",
        "appGwFrontendPort": 80,
        "appGwFrontendPortId": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts/', variables('applicationGatewayName'), variables('appGwFrontendPortName'))]",
        "appGwFrontendIpConfigName": "appGatewayPublicFrontendIpConfig",
        "appGwFrontendIpConfigId": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations/', variables('applicationGatewayName'), variables('appGwFrontendIpConfigName'))]",
        "appGwHttpSettingName": "appGatewayHttpSetting_80",
        "appGwHttpSettingId": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection/', variables('applicationGatewayName'), variables('appGwHttpSettingName'))]",
        "appGwHttpSettingProbeName": "appGatewayHttpSettingProbe_80",
        "appGwBackendAddressPoolName": "[concat('appGateway', variables('webAppName'), 'BackendPool')]",
        "appGwBackendAddressPoolId": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools/', variables('applicationGatewayName'), variables('appGwBackendAddressPoolName'))]",
        "appGwListenerName": "appGatewayListener",
        "appGwListenerId": "[resourceId('Microsoft.Network/applicationGateways/httpListeners/', variables('applicationGatewayName'), variables('appGwListenerName'))]",
        "appGwRoutingRuleName": "appGatewayRoutingRule"
    },
    "resources": [
      {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2021-09-01",
        "name": "[parameters('storageName')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "[parameters('storageSKU')]"
        },
        "kind": "StorageV2",
        "properties": {
          "supportsHttpsTrafficOnly": true
        }
      },
      {
        "type": "Microsoft.Web/serverfarms",
        "name": "[variables('webAppPlanName')]",
        "apiVersion": "2020-06-01",
        "location": "[variables('location')]",
        "properties": {
            "reserved": "false"
        },
        "sku": {
            "name": "[variables('webAppPlanSku')]",
            "capacity": 1
        }
      },
      {
        "name": "[variables('webAppName')]",
        "type": "Microsoft.Web/sites",
        "apiVersion": "2020-06-01",
        "location": "[variables('location')]",
        "dependsOn": [
            "[variables('webAppPlanId')]"
        ],
        "properties": {
            "serverFarmId": "[variables('webAppPlanId')]",
            "reserved": "false",
            "siteConfig": {
                "minTlsVersion": "1.2"
            },
            "httpsOnly": "false"
        }
      },
      {
        "type": "Microsoft.Network/virtualNetworks",
        "apiVersion": "2020-11-01",
        "name": "[parameters('virtualNetworks_vnet_name')]",
        "location": "switzerlandnorth",
        "properties": {
            "addressSpace": {
                "addressPrefixes": [
                    "192.168.0.0/16"
                ]
            },
            "subnets": [
                {
                    "name": "subnet",
                    "properties": {
                        "addressPrefix": "192.168.1.0/24"
                    }
                }
            ]
        }
      },
      {
        "type": "Microsoft.Network/virtualNetworks/subnets",
        "apiVersion": "2020-11-01",
        "name": "[concat(parameters('virtualNetworks_vnet_name'), '/subnet')]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworks_vnet_name'))]"
        ],
        "properties": {
            "addressPrefix": "192.168.1.0/24"
        }
      },
      {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-11-01",
      "name": "[parameters('publicIPAddresses_1909686752_name')]",
      "location": "switzerlandnorth",
      "properties": {
          "publicIPAllocationMethod": "Static",
          "idleTimeoutInMinutes": 4
      }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2020-11-01",
        "name": "[parameters('networkSecurityGroups_challenge_rgnsg_name')]",
        "location": "switzerlandnorth",
        "properties": {
            "securityRules": [
                {
                    "name": "RDPRule",
                    "properties": {
                        "protocol": "Tcp",
                        "sourcePortRange": "*",
                        "destinationPortRange": "3389",
                        "sourceAddressPrefix": "*",
                        "destinationAddressPrefix": "*",
                        "access": "Allow",
                        "priority": 1000,
                        "direction": "Inbound"
                    }
                },
                {
                    "name": "MSSQLRule",
                    "properties": {
                        "protocol": "Tcp",
                        "sourcePortRange": "*",
                        "destinationPortRange": "1433",
                        "sourceAddressPrefix": "*",
                        "destinationAddressPrefix": "*",
                        "access": "Allow",
                        "priority": 1001,
                        "direction": "Inbound"
                    }
                }
            ]
        }
    },
    {
        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
        "apiVersion": "2020-11-01",
        "name": "[concat(parameters('networkSecurityGroups_challenge_rgnsg_name'), '/MSSQLRule')]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroups_challenge_rgnsg_name'))]"
        ],
        "properties": {
            "protocol": "Tcp",
            "sourcePortRange": "*",
            "destinationPortRange": "1433",
            "sourceAddressPrefix": "*",
            "destinationAddressPrefix": "*",
            "access": "Allow",
            "priority": 1001,
            "direction": "Inbound"
        }
    },
    {
        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
        "apiVersion": "2020-11-01",
        "name": "[concat(parameters('networkSecurityGroups_challenge_rgnsg_name'), '/RDPRule')]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroups_challenge_rgnsg_name'))]"
        ],
        "properties": {
            "protocol": "Tcp",
            "sourcePortRange": "*",
            "destinationPortRange": "3389",
            "sourceAddressPrefix": "*",
            "destinationAddressPrefix": "*",
            "access": "Allow",
            "priority": 1000,
            "direction": "Inbound"
        }
    },
    {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2020-11-01",
            "name": "[parameters('networkInterfaces_challenge_rgint_name')]",
            "location": "switzerlandnorth",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[parameters('publicIPAddresses_1909686752_externalid')]"
                            },
                            "subnet": {
                                "id": "[concat(parameters('virtualNetworks_vnet_externalid'), '/subnets/subnet')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[parameters('networkSecurityGroups_challenge_rgnsg_externalid')]"
                }
            }
        }
    ]
  }